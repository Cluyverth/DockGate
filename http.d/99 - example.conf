
## Example Nginx reverse proxy configuration
# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name example.com www.example.com;
    return 301 https://$host$request_uri;
}

# HTTPS reverse proxy for example.com
server {
    listen 443 ssl;
    server_name example.com www.example.com;

    # SSL certificate and key (replace with your own files in certs/)
    ssl_certificate /etc/nginx/certs/certificate.crt;
    ssl_certificate_key /etc/nginx/certs/private.key;

    # Include recommended SSL and security headers
    include /etc/nginx/snippets/ssl-params.conf;
    include /etc/nginx/snippets/security-headers.conf;
    # Optionally enable Brotli or gzip compression:
    # include /etc/nginx/snippets/brotli.conf;
    # include /etc/nginx/snippets/gzip.conf;

    # Only allow safe HTTP methods
    if ($request_method !~ ^(GET|POST|HEAD|PUT|DELETE|PATCH|OPTIONS)$) {
        return 444;
    }

    # Main reverse proxy configuration
    location / {
        # IMPORTANT: Change 'backend' to your Docker Compose service name
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        send_timeout 60s;
        try_files $uri $uri/ /index.html;
        # Optionally add caching or rate limiting here
        # include /etc/nginx/snippets/cache.conf;
        # include /etc/nginx/snippets/ratelimit.conf;
    }
}
